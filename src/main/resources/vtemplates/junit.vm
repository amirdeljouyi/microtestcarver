package ${packageName};

import ${packageName}.${className};

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.BDDMockito.anyString;
import static org.mockito.BDDMockito.given;

public class ${className}Test {

    private ${className} subject;

#foreach($param in $params)
    #if( !${param.isPrimitiveType()} )
    @Mock
    private ${param.getShortType()} $param.key;
    #end
#end

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        subject = new ${className}(#foreach($arg in $args)$arg.value#if( $foreach.hasNext ), #end#end);
    }

#foreach( $method in $methods )
    @Test
    public void shouldTest${method.methodName}{
        #foreach( $field in $method.getFields() )
        #if(${field.isPrimitiveType()} )
        #set ($combineField = $combine.setField($field))
        #if(${combineField})
        subject.$combineField;
        #end
        #end
        #end

        #set ($map = $method.clazzMethodsBasedOnFields() )
        #foreach ($mapEntry in $map.entrySet())
        given(${mapEntry.value.getKey()}.${mapEntry.key.getMethodName()}(#foreach($arg in ${mapEntry.key.getArgs()})${arg.value}#if( $foreach.hasNext ), #end#end)).willReturn(${mapEntry.key.returnField.value});
        #end
        #if($method.hasReturn())
        #parse("vtemplates/assertion.vm")
        #else
        subject.${method.methodName}(#foreach($arg in ${method.getArgs()})${arg.getValue}#if( $foreach.hasNext ), #end#end);
        #end
    }

#end
}