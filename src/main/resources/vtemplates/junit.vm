package ${packageName};

import ${packageName}.${className};

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.BDDMockito.anyString;
import static org.mockito.BDDMockito.given;

public class ${className}Test {

    #parse("vtemplates/params.vm")

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        subject = new ${className}(#foreach($arg in $args)$arg.value#if( $foreach.hasNext ), #end#end);

${combine.setSubjectFields($initialFields)}
    }

#foreach( $method in $methods )
    @Test
    public void shouldTest${method.methodName}(){
##    Set the fields that have different values
        #foreach($field in $method.getFields() )
        #if(!$initialFields.contains($field))
        #set($combineField = $combine.setSubjectField($field))
        #if(${combineField})
${combineField}
        #end
        #end
        #end
        #set ($map = $method.clazzMethodsBasedOnFields() )
##    Mock
        #foreach ($mapEntry in $map.entrySet())
            #set($combineField = ${combine.mockField($mapEntry.key, $mapEntry.value)})
            #if(${combineField})
${combineField}
            #end
        #end
##        #if($method.hasReturn())
        #parse("vtemplates/assertion.vm")
##        #else
##        subject.${method.methodName}(#foreach($arg in ${method.getArgs()})${arg.getValue()}#if( $foreach.hasNext ), #end#end);
##        #end
    }

#end
}